{"ast":null,"code":"'use client';\n\nimport { useRef, useState, useCallback } from 'react';\nimport { getPath } from '../../paths/get-path.mjs';\nimport { setPath } from '../../paths/set-path.mjs';\nfunction useFormValues({\n  initialValues,\n  onValuesChange,\n  mode\n}) {\n  const initialized = useRef(false);\n  const [stateValues, setStateValues] = useState(initialValues || {});\n  const refValues = useRef(stateValues);\n  const valuesSnapshot = useRef(stateValues);\n  const setValues = useCallback(({\n    values,\n    subscribers,\n    updateState = true,\n    mergeWithPreviousValues = true\n  }) => {\n    const previousValues = refValues.current;\n    const resolvedValues = values instanceof Function ? values(refValues.current) : values;\n    const updatedValues = mergeWithPreviousValues ? {\n      ...previousValues,\n      ...resolvedValues\n    } : resolvedValues;\n    refValues.current = updatedValues;\n    updateState && setStateValues(updatedValues);\n    onValuesChange?.(updatedValues, previousValues);\n    subscribers?.filter(Boolean).forEach(subscriber => subscriber({\n      updatedValues,\n      previousValues\n    }));\n  }, [onValuesChange]);\n  const setFieldValue = useCallback(payload => {\n    const currentValue = getPath(payload.path, refValues.current);\n    const updatedValue = payload.value instanceof Function ? payload.value(currentValue) : payload.value;\n    if (currentValue !== updatedValue) {\n      const previousValues = refValues.current;\n      const updatedValues = setPath(payload.path, updatedValue, refValues.current);\n      setValues({\n        values: updatedValues,\n        updateState: payload.updateState\n      });\n      payload.subscribers?.filter(Boolean).forEach(subscriber => subscriber({\n        path: payload.path,\n        updatedValues,\n        previousValues\n      }));\n    }\n  }, [setValues]);\n  const setValuesSnapshot = useCallback(payload => {\n    valuesSnapshot.current = payload;\n  }, []);\n  const initialize = useCallback((values, onInitialize) => {\n    if (!initialized.current) {\n      initialized.current = true;\n      setValues({\n        values,\n        updateState: mode === \"controlled\"\n      });\n      setValuesSnapshot(values);\n      onInitialize();\n    }\n  }, [setValues]);\n  const resetValues = useCallback(() => {\n    setValues({\n      values: valuesSnapshot.current,\n      updateState: true,\n      mergeWithPreviousValues: false\n    });\n  }, [setValues]);\n  const getValues = useCallback(() => refValues.current, []);\n  const getValuesSnapshot = useCallback(() => valuesSnapshot.current, []);\n  return {\n    initialized,\n    stateValues,\n    refValues,\n    valuesSnapshot,\n    setValues,\n    setFieldValue,\n    resetValues,\n    setValuesSnapshot,\n    initialize,\n    getValues,\n    getValuesSnapshot\n  };\n}\nexport { useFormValues };","map":{"version":3,"names":["useFormValues","initialValues","onValuesChange","mode","initialized","useRef","stateValues","setStateValues","useState","refValues","valuesSnapshot","setValues","useCallback","values","subscribers","updateState","mergeWithPreviousValues","previousValues","current","resolvedValues","Function","updatedValues","filter","Boolean","forEach","subscriber","setFieldValue","payload","currentValue","getPath","path","updatedValue","value","setPath","setValuesSnapshot","initialize","onInitialize","resetValues","getValues","getValuesSnapshot"],"sources":["C:\\Users\\Christina\\Desktop\\React\\FED-medical\\node_modules\\@mantine\\form\\src\\hooks\\use-form-values\\use-form-values.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport { getPath, setPath } from '../../paths';\nimport { FormMode } from '../../types';\n\nexport interface $FormValues<Values extends Record<PropertyKey, any>> {\n  initialized: React.MutableRefObject<boolean>;\n  stateValues: Values;\n  refValues: React.MutableRefObject<Values>;\n  valuesSnapshot: React.MutableRefObject<Values>;\n  setValues: (payload: SetValuesInput<Values>) => void;\n  setFieldValue: (payload: SetFieldValueInput<Values>) => void;\n  resetValues: () => void;\n  setValuesSnapshot: (payload: Values) => void;\n  initialize: (values: Values, onInitialize: () => void) => void;\n  getValues: () => Values;\n  getValuesSnapshot: () => Values;\n}\n\nexport interface SetValuesSubscriberPayload<Values> {\n  path?: PropertyKey;\n  updatedValues: Values;\n  previousValues: Values;\n}\n\nexport interface SetValuesInput<Values> {\n  values: Partial<Values> | ((values: Values) => Partial<Values>);\n  mergeWithPreviousValues?: boolean;\n  updateState?: boolean;\n  subscribers?: (SetFieldValueSubscriber<Values> | null | undefined)[];\n}\n\nexport type SetFieldValueSubscriber<Values> = (payload: SetValuesSubscriberPayload<Values>) => void;\n\nexport interface SetFieldValueInput<Values> {\n  path: PropertyKey;\n  value: any;\n  updateState?: boolean;\n  subscribers?: (SetFieldValueSubscriber<Values> | null | undefined)[];\n}\n\ninterface UseFormValuesInput<Values extends Record<PropertyKey, any>> {\n  initialValues: Values | undefined;\n  mode: FormMode;\n  onValuesChange?: ((values: Values, previousValues: Values) => void) | undefined;\n}\n\nexport function useFormValues<Values extends Record<PropertyKey, any>>({\n  initialValues,\n  onValuesChange,\n  mode,\n}: UseFormValuesInput<Values>): $FormValues<Values> {\n  const initialized = useRef(false);\n  const [stateValues, setStateValues] = useState<Values>(initialValues || ({} as Values));\n  const refValues = useRef(stateValues);\n  const valuesSnapshot = useRef(stateValues);\n\n  const setValues = useCallback(\n    ({\n      values,\n      subscribers,\n      updateState = true,\n      mergeWithPreviousValues = true,\n    }: SetValuesInput<Values>) => {\n      const previousValues = refValues.current;\n      const resolvedValues = values instanceof Function ? values(refValues.current) : values;\n      const updatedValues = mergeWithPreviousValues\n        ? { ...previousValues, ...resolvedValues }\n        : (resolvedValues as Values);\n      refValues.current = updatedValues;\n      updateState && setStateValues(updatedValues);\n      onValuesChange?.(updatedValues, previousValues);\n      subscribers\n        ?.filter(Boolean)\n        .forEach((subscriber) => subscriber!({ updatedValues, previousValues }));\n    },\n    [onValuesChange]\n  );\n\n  const setFieldValue = useCallback(\n    (payload: SetFieldValueInput<Values>) => {\n      const currentValue = getPath(payload.path, refValues.current);\n      const updatedValue =\n        payload.value instanceof Function ? payload.value(currentValue) : payload.value;\n\n      if (currentValue !== updatedValue) {\n        const previousValues = refValues.current;\n        const updatedValues = setPath(payload.path, updatedValue, refValues.current);\n        setValues({ values: updatedValues, updateState: payload.updateState });\n\n        payload.subscribers\n          ?.filter(Boolean)\n          .forEach((subscriber) =>\n            subscriber!({ path: payload.path, updatedValues, previousValues })\n          );\n      }\n    },\n    [setValues]\n  );\n\n  const setValuesSnapshot = useCallback((payload: Values) => {\n    valuesSnapshot.current = payload;\n  }, []);\n\n  const initialize = useCallback(\n    (values: Values, onInitialize: () => void) => {\n      if (!initialized.current) {\n        initialized.current = true;\n        setValues({ values, updateState: mode === 'controlled' });\n        setValuesSnapshot(values);\n        onInitialize();\n      }\n    },\n    [setValues]\n  );\n\n  const resetValues = useCallback(() => {\n    setValues({\n      values: valuesSnapshot.current,\n      updateState: true,\n      mergeWithPreviousValues: false,\n    });\n  }, [setValues]);\n\n  const getValues = useCallback(() => refValues.current, []);\n  const getValuesSnapshot = useCallback(() => valuesSnapshot.current, []);\n\n  return {\n    initialized,\n    stateValues,\n    refValues,\n    valuesSnapshot,\n    setValues,\n    setFieldValue,\n    resetValues,\n    setValuesSnapshot,\n    initialize,\n    getValues,\n    getValuesSnapshot,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
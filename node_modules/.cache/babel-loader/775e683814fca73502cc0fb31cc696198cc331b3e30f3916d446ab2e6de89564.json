{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christina\\\\Desktop\\\\React\\\\FED-medical\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { Card, SimpleGrid, Button, Text, Flex } from \"@mantine/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  var _useLocation, _useLocation$state;\n  const [doctors, setDoctors] = useState([]);\n  const navigate = useNavigate();\n\n  // We saw in a previous class how our ProtectedRoute checks for authorisation\n  // if no token is found, it redirects to the '/' route, passing a 'msg' via the route state\n  // if there is a message, we retrieve it here and display it\n  const msg = ((_useLocation = useLocation()) === null || _useLocation === void 0 ? void 0 : (_useLocation$state = _useLocation.state) === null || _useLocation$state === void 0 ? void 0 : _useLocation$state.msg) || null;\n  const getDoctors = async () => {\n    try {\n      const res = await axios.get(`https://fed-medical-clinic-api.vercel.app/doctors/`);\n      setDoctors(res.data);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  useEffect(() => {\n    // We can't make useEffect itself async, so we call an async function from inside it\n    const fetchData = async () => {\n      await getDoctors();\n    };\n    fetchData();\n  }, []);\n  if (!doctors.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [msg && /*#__PURE__*/_jsxDEV(Text, {\n      mb: 10,\n      color: \"red\",\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      mb: 10,\n      onClick: () => navigate('/doctors/create'),\n      children: \"Create doctor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      cols: 3,\n      children: doctors && doctors.map(doctor => {\n        return (\n          /*#__PURE__*/\n          // Here we're using a polymorphic mantine component\n          // This is a card, but we're passing in a Flex component to be the root element\n          // That means the card will be rendered as a Flex component, but still have the styling of a card\n          // We can use the props of both the card and the Flex component\n          // So here I've given Flex as the root component\n          // That means I can use the justify and direction props of Flex, and use that to make sure the buttons pushed to the bottom\n          // https://dev.to/thexdev/polymorphic-component-2737\n          _jsxDEV(Card, {\n            shadow: \"sm\",\n            component: Flex,\n            justify: 'space-between',\n            direction: 'column',\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Dr \", doctor.first_name, \" \", doctor.last_name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Specialisation: \", doctor.specialisation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              w: '100%',\n              justify: 'space-between',\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => navigate(`/doctors/${doctor.id}`),\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => alert('Not implemented!'),\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(Home, \"d8t79Wi/L9ecw17bq/IFqSndWoQ=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","axios","useLocation","useNavigate","Card","SimpleGrid","Button","Text","Flex","jsxDEV","_jsxDEV","Home","_s","_useLocation","_useLocation$state","doctors","setDoctors","navigate","msg","state","getDoctors","res","get","data","e","console","error","fetchData","length","children","fileName","_jsxFileName","lineNumber","columnNumber","mb","color","onClick","cols","map","doctor","shadow","component","justify","direction","first_name","last_name","specialisation","w","id","alert","_c","$RefreshReg$"],"sources":["C:/Users/Christina/Desktop/React/FED-medical/src/pages/Home.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from 'axios'\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Card, SimpleGrid, Button, Text, Flex } from \"@mantine/core\";\r\n\r\nconst Home = () => {\r\n    const [doctors, setDoctors] = useState([])\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // We saw in a previous class how our ProtectedRoute checks for authorisation\r\n    // if no token is found, it redirects to the '/' route, passing a 'msg' via the route state\r\n    // if there is a message, we retrieve it here and display it\r\n    const msg = useLocation()?.state?.msg || null;\r\n\r\n    const getDoctors = async () => {\r\n        try {\r\n            const res = await axios.get(`https://fed-medical-clinic-api.vercel.app/doctors/`);\r\n            setDoctors(res.data);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // We can't make useEffect itself async, so we call an async function from inside it\r\n        const fetchData = async () => {\r\n            await getDoctors();\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n\r\n    if (!doctors.length) {\r\n        return <div>Loading...</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {msg && <Text mb={10} color='red'>{msg}</Text>}\r\n            <Button mb={10} onClick={() => navigate('/doctors/create')}>Create doctor</Button>\r\n            <SimpleGrid cols={3}>\r\n\r\n                {\r\n                    doctors && doctors.map((doctor) => {\r\n                        return (\r\n                            // Here we're using a polymorphic mantine component\r\n                            // This is a card, but we're passing in a Flex component to be the root element\r\n                            // That means the card will be rendered as a Flex component, but still have the styling of a card\r\n                            // We can use the props of both the card and the Flex component\r\n                            // So here I've given Flex as the root component\r\n                            // That means I can use the justify and direction props of Flex, and use that to make sure the buttons pushed to the bottom\r\n                            // https://dev.to/thexdev/polymorphic-component-2737\r\n                            <Card shadow=\"sm\" component={Flex} justify={'space-between'} direction={'column'}>\r\n                                <h2>Dr {doctor.first_name} {doctor.last_name}</h2>\r\n                                <p>Specialisation: {doctor.specialisation}</p>\r\n                                <Flex w={'100%'} justify={'space-between'}>\r\n                                    <button onClick={() => navigate(`/doctors/${doctor.id}`)}>View</button>\r\n                                    <button onClick={() => alert('Not implemented!')}>üóëÔ∏è</button>\r\n                                </Flex>\r\n                            </Card>\r\n                        )\r\n                    })\r\n                }\r\n            </SimpleGrid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christina\\\\Desktop\\\\React\\\\FED-medical\\\\src\\\\pages\\\\doctors\\\\Create.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from \"../../utils/useAuth\";\nimport { useForm } from '@mantine/form';\nimport { TextInput, Select, Text, Button } from \"@mantine/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Create = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const navigate = useNavigate();\n\n  // This hook comes from mantine\n  // This is similar to how we previously handled form state\n  // We used a simple useState to store the form data\n  // Along with our 'handleChange' function to update the form state\n  // Mantine can handle that for us, as well as provide form validation\n  const form = useForm({\n    initialValues: {\n      first_name: '',\n      last_name: '',\n      email: '',\n      phone: '',\n      specialisation: 'General Practitioner'\n    },\n    // before mantine allows us to submit the form, we can run our own validation\n    validate: {\n      first_name: value => value.length > 2 && value.length < 255 ? null : 'First name must be between 2 and 255 characters',\n      last_name: value => value.length > 2 && value.length < 255 ? null : 'Last name must be between 2 and 255 characters',\n      email: value => /^\\S+@\\S+$/.test(value) ? null : 'Invalid email',\n      // regex for validating an email address\n      phone: value => value.length === 10 ? null : 'Phone number must be 10 digits'\n    }\n  });\n  const handleSubmit = () => {\n    axios.post(`https://fed-medical-clinic-api.vercel.app/doctors`, form.values, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => {\n      console.log(res.data);\n      navigate(`../${res.data.id}`, {\n        relative: 'path'\n      });\n    }).catch(err => {\n      console.error(err);\n\n      // if our client side validation fails to catch something, we can catch it here\n      // we get errors from the server, so we retrieve them here and set them to show the user\n      if (err.response.status === 422) {\n        // this is an array, we want an object so have to loop through and get entries\n        let errors = err.response.data.error.issues;\n        form.setErrors(Object.fromEntries(errors.map(error => [error.path[0], error.message])));\n      }\n\n      // SQL constraint errors have a specific message, so we can catch them and set the field error\n      if (err.response.data.message == 'SQLITE_CONSTRAINT: SQLite error: UNIQUE constraint failed: doctors.email') {\n        console.log('Saw a unique constraint error');\n        form.setFieldError('email', 'Email must be unique.');\n      }\n      if (err.response.data.message == 'SQLITE_CONSTRAINT: SQLite error: UNIQUE constraint failed: doctors.phone') {\n        form.setFieldError('phone', 'Phone number must be unique.');\n      }\n    });\n  };\n  const specialisations = ['Podiatrist', 'Dermatologist', 'Pediatrician', 'Psychiatrist', 'General Practitioner'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      size: 24,\n      mb: 5,\n      children: \"Create a doctor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      // mantine provides the onSubmit hook, included in our form object\n      // this will run our handleSubmit function, but also run the form validation\n      onSubmit: form.onSubmit(handleSubmit),\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        withAsterisk: true,\n        label: 'First name',\n        name: \"first_name\",\n        ...form.getInputProps('first_name')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        withAsterisk: true,\n        label: \"Last name\",\n        name: \"last_name\",\n        ...form.getInputProps('last_name')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        withAsterisk: true,\n        name: \"specialisation\",\n        label: \"Specialisation\",\n        placeholder: \"Pick one\"\n        // this wants a value and label, in our case they are the same\n        // so map over the array and return an object with value and label as the same thing\n        ,\n        data: specialisations.map(specialisation => ({\n          value: specialisation,\n          label: specialisation\n        })),\n        ...form.getInputProps('specialisation')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        label: 'Email',\n        withAsterisk: true,\n        name: \"email\",\n        ...form.getInputProps('email')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        label: 'Phone',\n        name: \"phone\",\n        withAsterisk: true,\n        ...form.getInputProps('phone')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        mt: 10,\n        type: 'submit',\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(Create, \"CRQLdAbHsVN15bmwHDpRoZi8dsE=\", false, function () {\n  return [useAuth, useNavigate, useForm];\n});\n_c = Create;\nexport default Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["axios","useNavigate","useAuth","useForm","TextInput","Select","Text","Button","jsxDEV","_jsxDEV","Create","_s","token","navigate","form","initialValues","first_name","last_name","email","phone","specialisation","validate","value","length","test","handleSubmit","post","values","headers","Authorization","then","res","console","log","data","id","relative","catch","err","error","response","status","errors","issues","setErrors","Object","fromEntries","map","path","message","setFieldError","specialisations","children","size","mb","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","withAsterisk","label","name","getInputProps","placeholder","mt","type","_c","$RefreshReg$"],"sources":["C:/Users/Christina/Desktop/React/FED-medical/src/pages/doctors/Create.js"],"sourcesContent":["import axios from 'axios'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from \"../../utils/useAuth\";\r\nimport { useForm } from '@mantine/form'\r\nimport { TextInput, Select, Text, Button } from \"@mantine/core\";\r\n\r\nconst Create = () => {\r\n    const { token } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    // This hook comes from mantine\r\n    // This is similar to how we previously handled form state\r\n    // We used a simple useState to store the form data\r\n    // Along with our 'handleChange' function to update the form state\r\n    // Mantine can handle that for us, as well as provide form validation\r\n    const form = useForm({\r\n        initialValues: {\r\n            first_name: '',\r\n            last_name: '',\r\n            email: '',\r\n            phone: '',\r\n            specialisation: 'General Practitioner'\r\n        },\r\n        // before mantine allows us to submit the form, we can run our own validation\r\n        validate: {\r\n            first_name: (value) => value.length > 2 && value.length < 255 ? null : 'First name must be between 2 and 255 characters',\r\n            last_name: (value) => value.length > 2 && value.length < 255 ? null : 'Last name must be between 2 and 255 characters',\r\n            email: (value) => (/^\\S+@\\S+$/.test(value) ? null : 'Invalid email'), // regex for validating an email address\r\n            phone: (value) => value.length === 10 ? null : 'Phone number must be 10 digits'\r\n        },\r\n    })\r\n\r\n    const handleSubmit = () => {\r\n        axios.post(`https://fed-medical-clinic-api.vercel.app/doctors`, form.values, {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data)\r\n                navigate(`../${res.data.id}`, { relative: 'path' })\r\n            })\r\n            .catch((err) => {\r\n                console.error(err)\r\n\r\n                // if our client side validation fails to catch something, we can catch it here\r\n                // we get errors from the server, so we retrieve them here and set them to show the user\r\n                if (err.response.status === 422) {\r\n\r\n                    // this is an array, we want an object so have to loop through and get entries\r\n                    let errors = err.response.data.error.issues;\r\n\r\n                    form.setErrors(Object.fromEntries(errors.map((error) => [error.path[0], error.message])))\r\n                }\r\n\r\n                // SQL constraint errors have a specific message, so we can catch them and set the field error\r\n                if (err.response.data.message == 'SQLITE_CONSTRAINT: SQLite error: UNIQUE constraint failed: doctors.email') {\r\n                    console.log('Saw a unique constraint error')\r\n                    form.setFieldError('email', 'Email must be unique.');\r\n                }\r\n\r\n                if (err.response.data.message == 'SQLITE_CONSTRAINT: SQLite error: UNIQUE constraint failed: doctors.phone') {\r\n                    form.setFieldError('phone', 'Phone number must be unique.');\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n\r\n    const specialisations = [\r\n        'Podiatrist',\r\n        'Dermatologist',\r\n        'Pediatrician',\r\n        'Psychiatrist',\r\n        'General Practitioner',\r\n    ]\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Text size={24} mb={5}>Create a doctor</Text>\r\n            <form\r\n                // mantine provides the onSubmit hook, included in our form object\r\n                // this will run our handleSubmit function, but also run the form validation\r\n                onSubmit={form.onSubmit(handleSubmit)}>\r\n                <TextInput withAsterisk label={'First name'} name='first_name' {...form.getInputProps('first_name')} />\r\n                <TextInput withAsterisk label='Last name' name='last_name' {...form.getInputProps('last_name')} />\r\n\r\n                <Select\r\n                    withAsterisk\r\n                    name='specialisation'\r\n                    label=\"Specialisation\"\r\n                    placeholder=\"Pick one\"\r\n                    // this wants a value and label, in our case they are the same\r\n                    // so map over the array and return an object with value and label as the same thing\r\n                    data={specialisations.map(specialisation => ({ value: specialisation, label: specialisation }))}\r\n                    {...form.getInputProps('specialisation')}\r\n                />\r\n\r\n\r\n                {/* form.getInputProps('email') returns an object with props about the input */}\r\n                {/* We can spread (...) this object to pass all the props to the input all at once */}\r\n                <TextInput label={'Email'} withAsterisk name='email' {...form.getInputProps('email')} />\r\n\r\n                <TextInput label={'Phone'} name='phone' withAsterisk {...form.getInputProps('phone')} />\r\n\r\n                <Button mt={10} type={'submit'}>Submit</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Create;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
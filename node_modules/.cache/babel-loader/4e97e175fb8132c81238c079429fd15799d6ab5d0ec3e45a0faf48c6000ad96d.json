{"ast":null,"code":"'use client';\n\nimport { useRef, useCallback, useEffect } from 'react';\nimport { getPath } from '../../paths/get-path.mjs';\nimport 'klona/full';\nfunction useFormWatch({\n  $status\n}) {\n  const subscribers = useRef({});\n  const watch = useCallback((path, callback) => {\n    useEffect(() => {\n      subscribers.current[path] = subscribers.current[path] || [];\n      subscribers.current[path].push(callback);\n      return () => {\n        subscribers.current[path] = subscribers.current[path].filter(cb => cb !== callback);\n      };\n    }, [callback]);\n  }, []);\n  const getFieldSubscribers = useCallback(path => {\n    if (!subscribers.current[path]) {\n      return [];\n    }\n    return subscribers.current[path].map(callback => input => callback({\n      previousValue: getPath(path, input.previousValues),\n      value: getPath(path, input.updatedValues),\n      touched: $status.isTouched(path),\n      dirty: $status.isDirty(path)\n    }));\n  }, []);\n  return {\n    subscribers,\n    watch,\n    getFieldSubscribers\n  };\n}\nexport { useFormWatch };","map":{"version":3,"names":["useFormWatch","$status","subscribers","useRef","watch","useCallback","path","callback","useEffect","current","push","filter","cb","getFieldSubscribers","map","input","previousValue","getPath","previousValues","value","updatedValues","touched","isTouched","dirty","isDirty"],"sources":["C:\\Users\\Christina\\Desktop\\React\\FED-medical\\node_modules\\@mantine\\form\\src\\hooks\\use-form-watch\\use-form-watch.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { getPath } from '../../paths';\nimport { FormFieldSubscriber, LooseKeys, Watch } from '../../types';\nimport { $FormStatus } from '../use-form-status/use-form-status';\nimport { SetValuesSubscriberPayload } from '../use-form-values/use-form-values';\n\ninterface UseFormWatchInput<Values extends Record<string, any>> {\n  $status: $FormStatus<Values>;\n}\n\nexport function useFormWatch<Values extends Record<string, any>>({\n  $status,\n}: UseFormWatchInput<Values>) {\n  const subscribers = useRef<Record<LooseKeys<Values>, FormFieldSubscriber<Values, any>[]>>(\n    {} as any\n  );\n\n  const watch: Watch<Values> = useCallback((path, callback) => {\n    useEffect(() => {\n      subscribers.current[path] = subscribers.current[path] || [];\n      subscribers.current[path].push(callback);\n\n      return () => {\n        subscribers.current[path] = subscribers.current[path].filter((cb) => cb !== callback);\n      };\n    }, [callback]);\n  }, []);\n\n  const getFieldSubscribers = useCallback((path: LooseKeys<Values>) => {\n    if (!subscribers.current[path]) {\n      return [];\n    }\n\n    return subscribers.current[path].map(\n      (callback) => (input: SetValuesSubscriberPayload<Values>) =>\n        callback({\n          previousValue: getPath(path, input.previousValues) as any,\n          value: getPath(path, input.updatedValues) as any,\n          touched: $status.isTouched(path),\n          dirty: $status.isDirty(path),\n        })\n    );\n  }, []);\n\n  return {\n    subscribers,\n    watch,\n    getFieldSubscribers,\n  };\n}\n"],"mappings":";;;;;AAGO,SAASA,YAAYA,CAAC;EAC3BC;AACF,CAAC,EAAE;EACD,MAAMC,WAAW,GAAGC,MAAM,CACxB,EACD;EACD,MAAMC,KAAK,GAAGC,WAAW,CAAC,CAACC,IAAI,EAAEC,QAAQ,KAAK;IAC5CC,SAAS,CAAC,MAAM;MACdN,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,GAAGJ,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,IAAI,EAAE;MAC3DJ,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,CAACI,IAAI,CAACH,QAAQ,CAAC;MACxC,OAAO,MAAM;QACXL,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,GAAGJ,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,CAACK,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKL,QAAQ,CAAC;MACtF;IACP,CAAK,EAAE,CAACA,QAAQ,CAAC,CAAC;EACf,GAAE,EAAE,CAAC;EACN,MAAMM,mBAAmB,GAAGR,WAAW,CAAEC,IAAI,IAAK;IAChD,IAAI,CAACJ,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,EAAE;MAC9B,OAAO,EAAE;IACf;IACI,OAAOJ,WAAW,CAACO,OAAO,CAACH,IAAI,CAAC,CAACQ,GAAG,CACjCP,QAAQ,IAAMQ,KAAK,IAAKR,QAAQ,CAAC;MAChCS,aAAa,EAAEC,OAAO,CAACX,IAAI,EAAES,KAAK,CAACG,cAAc,CAAC;MAClDC,KAAK,EAAEF,OAAO,CAACX,IAAI,EAAES,KAAK,CAACK,aAAa,CAAC;MACzCC,OAAO,EAAEpB,OAAO,CAACqB,SAAS,CAAChB,IAAI,CAAC;MAChCiB,KAAK,EAAEtB,OAAO,CAACuB,OAAO,CAAClB,IAAI;IAC5B,EACF;EACF,GAAE,EAAE,CAAC;EACN,OAAO;IACLJ,WAAW;IACXE,KAAK;IACLS;EACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
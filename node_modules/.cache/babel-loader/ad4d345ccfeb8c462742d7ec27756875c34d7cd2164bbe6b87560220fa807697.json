{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback } from 'react';\nimport { filterErrors } from './filter-errors/filter-errors.mjs';\nfunction useFormErrors(initialErrors) {\n  const [errorsState, setErrorsState] = useState(filterErrors(initialErrors));\n  const errorsRef = useRef(errorsState);\n  const setErrors = useCallback(errors => {\n    setErrorsState(current => {\n      const newErrors = filterErrors(typeof errors === \"function\" ? errors(current) : errors);\n      errorsRef.current = newErrors;\n      return newErrors;\n    });\n  }, []);\n  const clearErrors = useCallback(() => setErrors({}), []);\n  const clearFieldError = useCallback(path => {\n    if (errorsRef.current[path] === void 0) {\n      return;\n    }\n    setErrors(current => {\n      const errors = {\n        ...current\n      };\n      delete errors[path];\n      return errors;\n    });\n  }, [errorsState]);\n  const setFieldError = useCallback((path, error) => {\n    if (error == null || error === false) {\n      clearFieldError(path);\n    } else if (errorsRef.current[path] !== error) {\n      setErrors(current => ({\n        ...current,\n        [path]: error\n      }));\n    }\n  }, [errorsState]);\n  return {\n    errorsState,\n    setErrors,\n    clearErrors,\n    setFieldError,\n    clearFieldError\n  };\n}\nexport { useFormErrors };","map":{"version":3,"names":["useFormErrors","initialErrors","errorsState","setErrorsState","useState","filterErrors","errorsRef","useRef","setErrors","useCallback","errors","current","newErrors","clearErrors","clearFieldError","path","setFieldError","error"],"sources":["C:\\Users\\Christina\\Desktop\\React\\FED-medical\\node_modules\\@mantine\\form\\src\\hooks\\use-form-errors\\use-form-errors.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport { ClearErrors, ClearFieldError, FormErrors, SetErrors, SetFieldError } from '../../types';\nimport { filterErrors } from './filter-errors/filter-errors';\n\nexport interface $FormErrors<Values extends Record<string, any>> {\n  errorsState: FormErrors;\n  setErrors: SetErrors;\n  clearErrors: ClearErrors;\n  setFieldError: SetFieldError<Values>;\n  clearFieldError: ClearFieldError;\n}\n\nexport function useFormErrors<Values extends Record<string, any>>(\n  initialErrors: FormErrors\n): $FormErrors<Values> {\n  const [errorsState, setErrorsState] = useState(filterErrors(initialErrors));\n  const errorsRef = useRef(errorsState);\n\n  const setErrors: SetErrors = useCallback((errors) => {\n    setErrorsState((current) => {\n      const newErrors = filterErrors(typeof errors === 'function' ? errors(current) : errors);\n      errorsRef.current = newErrors;\n      return newErrors;\n    });\n  }, []);\n\n  const clearErrors: ClearErrors = useCallback(() => setErrors({}), []);\n\n  const clearFieldError: ClearFieldError = useCallback(\n    (path) => {\n      if (errorsRef.current[path as string] === undefined) {\n        return;\n      }\n\n      setErrors((current) => {\n        const errors = { ...current };\n        delete errors[path as string];\n        return errors;\n      });\n    },\n    [errorsState]\n  );\n\n  const setFieldError: SetFieldError<Values> = useCallback(\n    (path, error) => {\n      if (error == null || error === false) {\n        clearFieldError(path);\n      } else if (errorsRef.current[path as string] !== error) {\n        setErrors((current) => ({ ...current, [path]: error }));\n      }\n    },\n    [errorsState]\n  );\n\n  return {\n    errorsState,\n    setErrors,\n    clearErrors,\n    setFieldError,\n    clearFieldError,\n  };\n}\n"],"mappings":";;;;AAGO,SAASA,aAAaA,CAACC,aAAa,EAAE;EAC3C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAACC,YAAY,CAACJ,aAAa,CAAC,CAAC;EAC3E,MAAMK,SAAS,GAAGC,MAAM,CAACL,WAAW,CAAC;EACrC,MAAMM,SAAS,GAAGC,WAAW,CAAEC,MAAM,IAAK;IACxCP,cAAc,CAAEQ,OAAO,IAAK;MAC1B,MAAMC,SAAS,GAAGP,YAAY,CAAC,OAAOK,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACC,OAAO,CAAC,GAAGD,MAAM,CAAC;MACvFJ,SAAS,CAACK,OAAO,GAAGC,SAAS;MAC7B,OAAOA,SAAS;IACtB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,MAAMC,WAAW,GAAGJ,WAAW,CAAC,MAAMD,SAAS,CAAC,CAAE,EAAC,EAAE,EAAE,CAAC;EACxD,MAAMM,eAAe,GAAGL,WAAW,CAChCM,IAAI,IAAK;IACR,IAAIT,SAAS,CAACK,OAAO,CAACI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;MACtC;IACR;IACMP,SAAS,CAAEG,OAAO,IAAK;MACrB,MAAMD,MAAM,GAAG;QAAE,GAAGC;MAAS;MAC7B,OAAOD,MAAM,CAACK,IAAI,CAAC;MACnB,OAAOL,MAAM;IACrB,CAAO,CAAC;EACH,GACD,CAACR,WAAW,CACb;EACD,MAAMc,aAAa,GAAGP,WAAW,CAC/B,CAACM,IAAI,EAAEE,KAAK,KAAK;IACf,IAAIA,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,KAAK,EAAE;MACpCH,eAAe,CAACC,IAAI,CAAC;IACtB,OAAM,IAAIT,SAAS,CAACK,OAAO,CAACI,IAAI,CAAC,KAAKE,KAAK,EAAE;MAC5CT,SAAS,CAAEG,OAAO,KAAM;QAAE,GAAGA,OAAO;QAAE,CAACI,IAAI,GAAGE;MAAK,CAAE,CAAC,CAAC;IAC/D;EACK,GACD,CAACf,WAAW,CACb;EACD,OAAO;IACLA,WAAW;IACXM,SAAS;IACTK,WAAW;IACXG,aAAa;IACbF;EACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
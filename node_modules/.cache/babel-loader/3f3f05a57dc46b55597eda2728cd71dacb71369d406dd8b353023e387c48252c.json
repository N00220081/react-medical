{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Christina\\\\Desktop\\\\React\\\\FED-medical\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport { Outlet, Navigate } from 'react-router-dom';\nimport { useAuth } from '../utils/useAuth';\n\n// Outlet acts as a placeholder for child routes\n// We've created a protected 'parent' route at '/' which returns this ProtectedRoute\n// Within that is a nested 'child' route 'festivals/:id' which returns SingleFestival\n\n// When the user goes to /festivals/:id, the request is caught in here first\n// We check if there's a token. If there is, we return an <Outlet>, which passes the user into the child route (festivals/:id)\n// If there is no token, we return a Navigate element, which sends the user back to the homepage and passes a state message\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/',\n      state: {\n        msg: 'Unauthorised user! Please login to access that page'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(ProtectedRoute, \"u25MEdxvelSOV6EcwnD3OLkfQA8=\", false, function () {\n  return [useAuth];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Outlet","Navigate","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","_s","token","to","state","msg","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Christina/Desktop/React/FED-medical/src/components/ProtectedRoute.js"],"sourcesContent":["import { Outlet, Navigate } from 'react-router-dom'\r\nimport { useAuth } from '../utils/useAuth'\r\n\r\n// Outlet acts as a placeholder for child routes\r\n// We've created a protected 'parent' route at '/' which returns this ProtectedRoute\r\n// Within that is a nested 'child' route 'festivals/:id' which returns SingleFestival\r\n\r\n// When the user goes to /festivals/:id, the request is caught in here first\r\n// We check if there's a token. If there is, we return an <Outlet>, which passes the user into the child route (festivals/:id)\r\n// If there is no token, we return a Navigate element, which sends the user back to the homepage and passes a state message\r\nconst ProtectedRoute = () => {\r\n    const {token} = useAuth();\r\n\r\n    if (!token) {\r\n        return (\r\n            <Navigate\r\n                to={'/'}\r\n                state={{ msg: 'Unauthorised user! Please login to access that page' }}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Outlet />\r\n    )\r\n\r\n}\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,kBAAkB;AACnD,SAASC,OAAO,QAAQ,kBAAkB;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAACC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;EAEzB,IAAI,CAACK,KAAK,EAAE;IACR,oBACIH,OAAA,CAACH,QAAQ;MACLO,EAAE,EAAE,GAAI;MACRC,KAAK,EAAE;QAAEC,GAAG,EAAE;MAAsD;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC;EAEV;EAEA,oBACIV,OAAA,CAACJ,MAAM;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAGlB,CAAC;AAAAR,EAAA,CAhBKD,cAAc;EAAA,QACAH,OAAO;AAAA;AAAAa,EAAA,GADrBV,cAAc;AAkBpB,eAAeA,cAAc;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
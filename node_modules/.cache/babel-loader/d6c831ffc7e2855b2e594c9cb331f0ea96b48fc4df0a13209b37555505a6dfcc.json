{"ast":null,"code":"'use client';\n\nimport { useCallback } from 'react';\nimport { changeErrorIndices } from '../../lists/change-error-indices.mjs';\nimport { reorderErrors } from '../../lists/reorder-errors.mjs';\nimport 'klona/full';\nimport { reorderPath } from '../../paths/reorder-path.mjs';\nimport { insertPath } from '../../paths/insert-path.mjs';\nimport { removePath } from '../../paths/remove-path.mjs';\nimport { replacePath } from '../../paths/replace-path.mjs';\nfunction useFormList({\n  $values,\n  $errors,\n  $status\n}) {\n  const reorderListItem = useCallback((path, payload) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors(errs => reorderErrors(path, payload, errs));\n    $values.setValues({\n      values: reorderPath(path, payload, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  const removeListItem = useCallback((path, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors(errs => changeErrorIndices(path, index, errs, -1));\n    $values.setValues({\n      values: removePath(path, index, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  const insertListItem = useCallback((path, item, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors(errs => changeErrorIndices(path, index, errs, 1));\n    $values.setValues({\n      values: insertPath(path, item, index, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  const replaceListItem = useCallback((path, index, item) => {\n    $status.clearFieldDirty(path);\n    $values.setValues({\n      values: replacePath(path, item, index, $values.refValues.current),\n      updateState: true\n    });\n  }, []);\n  return {\n    reorderListItem,\n    removeListItem,\n    insertListItem,\n    replaceListItem\n  };\n}\nexport { useFormList };","map":{"version":3,"names":["useFormList","$values","$errors","$status","reorderListItem","useCallback","path","payload","clearFieldDirty","setErrors","errs","reorderErrors","setValues","values","reorderPath","refValues","current","updateState","removeListItem","index","changeErrorIndices","removePath","insertListItem","item","insertPath","replaceListItem","replacePath"],"sources":["C:\\Users\\Christina\\Desktop\\React\\FED-medical\\node_modules\\@mantine\\form\\src\\hooks\\use-form-list\\use-form-list.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { changeErrorIndices, reorderErrors } from '../../lists';\nimport { insertPath, removePath, reorderPath, replacePath } from '../../paths';\nimport { InsertListItem, RemoveListItem, ReorderListItem, ReplaceListItem } from '../../types';\nimport type { $FormErrors } from '../use-form-errors/use-form-errors';\nimport type { $FormStatus } from '../use-form-status/use-form-status';\nimport type { $FormValues } from '../use-form-values/use-form-values';\n\ninterface UseFormListInput<Values extends Record<string, any>> {\n  $values: $FormValues<Values>;\n  $errors: $FormErrors<Values>;\n  $status: $FormStatus<Values>;\n}\n\nexport function useFormList<Values extends Record<string, any>>({\n  $values,\n  $errors,\n  $status,\n}: UseFormListInput<Values>) {\n  const reorderListItem: ReorderListItem<Values> = useCallback((path, payload) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors((errs) => reorderErrors(path, payload, errs));\n    $values.setValues({\n      values: reorderPath(path, payload, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  const removeListItem: RemoveListItem<Values> = useCallback((path, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors((errs) => changeErrorIndices(path, index, errs, -1));\n    $values.setValues({\n      values: removePath(path, index, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  const insertListItem: InsertListItem<Values> = useCallback((path, item, index) => {\n    $status.clearFieldDirty(path);\n    $errors.setErrors((errs) => changeErrorIndices(path, index, errs, 1));\n    $values.setValues({\n      values: insertPath(path, item, index, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  const replaceListItem: ReplaceListItem<Values> = useCallback((path, index, item) => {\n    $status.clearFieldDirty(path);\n    $values.setValues({\n      values: replacePath(path, item, index, $values.refValues.current),\n      updateState: true,\n    });\n  }, []);\n\n  return { reorderListItem, removeListItem, insertListItem, replaceListItem };\n}\n"],"mappings":";;;;;;;;;;AAIO,SAASA,WAAWA,CAAC;EAC1BC,OAAO;EACPC,OAAO;EACPC;AACF,CAAC,EAAE;EACD,MAAMC,eAAe,GAAGC,WAAW,CAAC,CAACC,IAAI,EAAEC,OAAO,KAAK;IACrDJ,OAAO,CAACK,eAAe,CAACF,IAAI,CAAC;IAC7BJ,OAAO,CAACO,SAAS,CAAEC,IAAI,IAAKC,aAAa,CAACL,IAAI,EAAEC,OAAO,EAAEG,IAAI,CAAC,CAAC;IAC/DT,OAAO,CAACW,SAAS,CAAC;MAChBC,MAAM,EAAEC,WAAW,CAACR,IAAI,EAAEC,OAAO,EAAEN,OAAO,CAACc,SAAS,CAACC,OAAO,CAAC;MAC7DC,WAAW,EAAE;IACnB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,MAAMC,cAAc,GAAGb,WAAW,CAAC,CAACC,IAAI,EAAEa,KAAK,KAAK;IAClDhB,OAAO,CAACK,eAAe,CAACF,IAAI,CAAC;IAC7BJ,OAAO,CAACO,SAAS,CAAEC,IAAI,IAAKU,kBAAkB,CAACd,IAAI,EAAEa,KAAK,EAAET,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACtET,OAAO,CAACW,SAAS,CAAC;MAChBC,MAAM,EAAEQ,UAAU,CAACf,IAAI,EAAEa,KAAK,EAAElB,OAAO,CAACc,SAAS,CAACC,OAAO,CAAC;MAC1DC,WAAW,EAAE;IACnB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,MAAMK,cAAc,GAAGjB,WAAW,CAAC,CAACC,IAAI,EAAEiB,IAAI,EAAEJ,KAAK,KAAK;IACxDhB,OAAO,CAACK,eAAe,CAACF,IAAI,CAAC;IAC7BJ,OAAO,CAACO,SAAS,CAAEC,IAAI,IAAKU,kBAAkB,CAACd,IAAI,EAAEa,KAAK,EAAET,IAAI,EAAE,CAAC,CAAC,CAAC;IACrET,OAAO,CAACW,SAAS,CAAC;MAChBC,MAAM,EAAEW,UAAU,CAAClB,IAAI,EAAEiB,IAAI,EAAEJ,KAAK,EAAElB,OAAO,CAACc,SAAS,CAACC,OAAO,CAAC;MAChEC,WAAW,EAAE;IACnB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,MAAMQ,eAAe,GAAGpB,WAAW,CAAC,CAACC,IAAI,EAAEa,KAAK,EAAEI,IAAI,KAAK;IACzDpB,OAAO,CAACK,eAAe,CAACF,IAAI,CAAC;IAC7BL,OAAO,CAACW,SAAS,CAAC;MAChBC,MAAM,EAAEa,WAAW,CAACpB,IAAI,EAAEiB,IAAI,EAAEJ,KAAK,EAAElB,OAAO,CAACc,SAAS,CAACC,OAAO,CAAC;MACjEC,WAAW,EAAE;IACnB,CAAK,CAAC;EACH,GAAE,EAAE,CAAC;EACN,OAAO;IAAEb,eAAe;IAAEc,cAAc;IAAEI,cAAc;IAAEG;EAAiB;AAC7E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}